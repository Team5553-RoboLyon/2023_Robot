#include "../NErrorHandling.h"
#include "NUIColorSet.h"


NUI_COLORSET*	NSetupUIColorSet( NUI_COLORSET *puic, const NUI_COLORSET_DESC *pdesc )
{
	NErrorIf(!puic, NERROR_NULL_POINTER);

	// First of ALL: DEFAULT VALUES for ALL.
	// BKG
	NSetColorRangef(&puic->Colors[NUI_COLORSET_BKG][NUI_COLORSET_ENABLE][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_BKG_ENABLE_COLOR_4F );
	NSetColorRangef(&puic->Colors[NUI_COLORSET_BKG][NUI_COLORSET_DISABLE][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_BKG_DISABLE_COLOR_4F );
	NSetColorRangef(&puic->Colors[NUI_COLORSET_BKG][NUI_COLORSET_FOCUS][0],		CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_BKG_FOCUS_COLOR_4F );
	// ICON
	NSetColorRangef(&puic->Colors[NUI_COLORSET_ICON][NUI_COLORSET_ENABLE][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_ICON_ENABLE_COLOR_4F );
	NSetColorRangef(&puic->Colors[NUI_COLORSET_ICON][NUI_COLORSET_DISABLE][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_ICON_DISABLE_COLOR_4F );
	NSetColorRangef(&puic->Colors[NUI_COLORSET_ICON][NUI_COLORSET_FOCUS][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_ICON_FOCUS_COLOR_4F );
	// TEXT
	NSetColorRangef(&puic->Colors[NUI_COLORSET_TEXT][NUI_COLORSET_ENABLE][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_TEXT_ENABLE_COLOR_4F );
	NSetColorRangef(&puic->Colors[NUI_COLORSET_TEXT][NUI_COLORSET_DISABLE][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_TEXT_DISABLE_COLOR_4F );
	NSetColorRangef(&puic->Colors[NUI_COLORSET_TEXT][NUI_COLORSET_FOCUS][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_TEXT_FOCUS_COLOR_4F );
	// CHECK
	NSetColorRangef(&puic->Colors[NUI_COLORSET_CHECK][NUI_COLORSET_ENABLE][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_CHECK_ENABLE_COLOR_4F );
	NSetColorRangef(&puic->Colors[NUI_COLORSET_CHECK][NUI_COLORSET_DISABLE][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_CHECK_DISABLE_COLOR_4F );
	NSetColorRangef(&puic->Colors[NUI_COLORSET_CHECK][NUI_COLORSET_FOCUS][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_CHECK_FOCUS_COLOR_4F );
	// UNCHECK
	NSetColorRangef(&puic->Colors[NUI_COLORSET_UNCHECK][NUI_COLORSET_ENABLE][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_UNCHECK_ENABLE_COLOR_4F );
	NSetColorRangef(&puic->Colors[NUI_COLORSET_UNCHECK][NUI_COLORSET_DISABLE][0],	CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_UNCHECK_DISABLE_COLOR_4F );
	NSetColorRangef(&puic->Colors[NUI_COLORSET_UNCHECK][NUI_COLORSET_FOCUS][0],		CONSTANT_NUI_COLORSET_COLORRANGE_SIZE,DEFAULT_NUI_COLORSET_UNCHECK_FOCUS_COLOR_4F );
	

	if(pdesc)
	{
		Nu32 el,st;
		for(el=0;el<NUI_COLORSET_ELEMENT_ENUM_SIZE;el++)
		{
			for(st=0;st<NUI_COLORSET_STATE_ENUM_SIZE;st++)
			{
				if( NUI_IS_COLORSET_DESC_RANGE_DEFINED(pdesc->BitField,el,st) )
					memcpy(&puic->Colors[el][st][0],&pdesc->Colors[el][st][0],CONSTANT_NUI_COLORSET_COLORRANGE_SIZE*sizeof(NCOLOR));
			}
		}
	}

	return puic;
}

NUI_COLORSET*	NCreateUIColorSet( const NUI_COLORSET_DESC *pdesc )
{
	return NSetupUIColorSet(NEW(NUI_COLORSET),pdesc);
}

void NClearUIColorSet(NUI_COLORSET *puic)
{
	Nmem0(puic,NUI_COLORSET);
}

void NDeleteUIColorSet(NUI_COLORSET *puic)
{
	NClearUIColorSet(puic);
	Nfree(puic);
}


const NCOLOR*	NGetUIColorSetPtr(const NUI_COLORSET *pcolorset, const NUI_COLORSET_ELEMENT_ENUM el, const NUI_COLORSET_STATE_ENUM state )
{
	return &pcolorset->Colors[el][state][0];
}