#ifndef __NUT_SLIDER_H
#define __NUT_SLIDER_H

// ***************************************************************************************
// ***************************************************************************************
// **																					**
// **								   NUT_Slider.h										**
// **																					**
// ***************************************************************************************
// ***************************************************************************************
#include "../NCStandard.h"
#include "../NFlags.h"
#include "../NType.h"
#include "../Maths/NVec3f32.h"
#include "../NScreenPoint.h"
#include "../NErrorHandling.h"

#ifdef __cplusplus
extern "C"
{
#endif
// --------------------------------------------------------------------------------------------------------------------------------------------------------------

#define DEFAULT_NUT_SLIDER_SIZE_2f					0.250f,0.025f	// A quarter of a screen height for length and 10% of that for thickness
#define DEFAULT_NUT_SLIDER_VDIR_2f					0.000f,1.000f	// Vertical Direction

#define CONSTANT_NUT_SLIDER_SNAP_STRENGTH_NULL		0
#define CONSTANT_NUT_SLIDER_SNAP_STRENGTH_LOW		32
#define CONSTANT_NUT_SLIDER_SNAP_STRENGTH_MEDIUM	64
#define CONSTANT_NUT_SLIDER_SNAP_STRENGTH_HIGH		96
#define CONSTANT_NUT_SLIDER_SNAP_STRENGTH_MAX		255 // from 128 SNAP is total

#define FLAG_NUT_SLIDER_SHOW_OUTPUTVALUE			BIT_0	// To print current output value as draw text
#define FLAG_NUT_SLIDER_ORIENT_OUTPUTVALUE			BIT_1	// To orient output value (draw text) along the Slider direction
#define FLAG_NUT_SLIDER_SHOW_TICKS					BIT_2	// To draw step as ticks along slider (if there are steps obviously)
#define FLAG_NUT_SLIDER_SNAP						BIT_3	// To Activate Deactivate SNAP mechanism
// #define FLAG_NUT_SLIDER_xxx						BIT_4
// #define FLAG_NUT_SLIDER_xxx						BIT_5
// #define FLAG_NUT_SLIDER_xxx						BIT_6
// #define FLAG_NUT_SLIDER_xxx						BIT_7
typedef struct  
{
	Nu8			Flags;			// 8 Flags	
	Nu8			SnapStrength;	// 0 to NU8MAX (prefer using CONSTANT_NUT_SLIDER_SNAP_STRENGTH__xxx) to define the handle behavior regarding steps.
	Nu16		InterSteps;		// Number of intermediate steps along the Slider. Each one is visible as a tick
	
	Nf32		Min;			// |Slider Out Going Value Limits.
	Nf32		Max;			// |
	
	// Internal
	Nf32		Magnitude;		// Current Position of the handle from Origin along Slider axis.
	NVEC2	VDir;			// Orient the slider from Origin (Min) to the positive direction ( to the Max) 
 	NVEC2	Size;			// x is the 'length' of the slider. y is the 'thickness' of the slider.
	NVEC2	Origin;			// The slider 'start', where magnitude = 0 and value = Min. 
}NUT_SLIDER;


NUT_SLIDER* NUT_SetupSlider(NUT_SLIDER* pslider,const Nf32 valuemin, const Nf32 valuemax,const NVEC2* pdirection,const NVEC2* psize, const Nu16 intermediate_steps, const Nu8 snap_strength);
NUT_SLIDER* NUT_CreateSlider(const Nf32 valuemin, const Nf32 valuemax,const NVEC2* pdirection,const NVEC2* psize, const Nu16 intermediate_steps, const Nu8 snap_strength);
void		NUT_ClearSlider(NUT_SLIDER *pslider);
void		NUT_DeleteSlider(NUT_SLIDER *pslider);

void		NUT_PlaceSlider(NUT_SLIDER *pslider, const Nf32 currentvalue, const NVEC2s16 *ppointer);
Nf32		NUT_UpdateSlider(NUT_SLIDER *pslider,const NVEC2s16 *ppointer);


inline void NUT_SetSliderLimits(NUT_SLIDER* pslider,const Nf32 valuemin, const Nf32 valuemax){NErrorIf(valuemin>=valuemax,NERROR_INCONSISTENT_VALUES);pslider->Min=valuemin;pslider->Max=valuemax;}
inline void NUT_SetSliderDirection(NUT_SLIDER* pslider,const NVEC2 * pdir){if(pdir){pslider->VDir=*pdir;NVec2Normalize(&pslider->VDir);}else{NVec2Set(&pslider->VDir,DEFAULT_NUT_SLIDER_VDIR_2f);}}
inline void NUT_SetSliderSize(NUT_SLIDER* pslider,const NVEC2 * psize){if(psize){pslider->Size=*psize;}else{NVec2Set(&pslider->Size,DEFAULT_NUT_SLIDER_SIZE_2f);}}
inline void NUT_SetSliderSnapStrength(NUT_SLIDER* pslider,const Nu8 snapstrength ){pslider->SnapStrength = snapstrength;}
inline void NUT_SetSliderIntermediateStepsNumber(NUT_SLIDER* pslider,const Nu16 intersteps ){pslider->InterSteps = intersteps;}

inline void NUT_ActivateSliderProperties(NUT_SLIDER* pslider, const Nu8 flags_properties){FLAG_ON(pslider->Flags,flags_properties);}
inline void NUT_DeactivateSliderProperties(NUT_SLIDER* pslider, const Nu8 flags_properties){FLAG_OFF(pslider->Flags,flags_properties);}

inline void NUT_ActivateSliderSnap(NUT_SLIDER* pslider){FLAG_ON(pslider->Flags,FLAG_NUT_SLIDER_SNAP);}
inline void NUT_DeactivateSliderSnap(NUT_SLIDER* pslider){FLAG_OFF(pslider->Flags,FLAG_NUT_SLIDER_SNAP);}
inline void NUT_ShowSliderOutputValue(NUT_SLIDER* pslider){FLAG_ON(pslider->Flags,FLAG_NUT_SLIDER_SHOW_OUTPUTVALUE);}
inline void NUT_HideSliderOutputValue(NUT_SLIDER* pslider){FLAG_OFF(pslider->Flags,FLAG_NUT_SLIDER_SHOW_OUTPUTVALUE);}
inline void NUT_ShowSliderTicks(NUT_SLIDER* pslider){FLAG_ON(pslider->Flags,FLAG_NUT_SLIDER_SHOW_TICKS);}
inline void NUT_HideSliderTicks(NUT_SLIDER* pslider){FLAG_OFF(pslider->Flags,FLAG_NUT_SLIDER_SHOW_TICKS);}
inline void NUT_OrientSliderOutputValue(NUT_SLIDER* pslider){FLAG_ON(pslider->Flags,FLAG_NUT_SLIDER_ORIENT_OUTPUTVALUE);}
inline void NUT_AlignSliderOutputValue(NUT_SLIDER* pslider){FLAG_OFF(pslider->Flags,FLAG_NUT_SLIDER_ORIENT_OUTPUTVALUE);}


// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef __cplusplus
}
#endif	// __cpluplus
#endif	// __NUT_SLIDER_H 

