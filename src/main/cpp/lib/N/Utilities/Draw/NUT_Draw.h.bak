#ifndef __NUT_DRAW_H
#define __NUT_DRAW_H

// ***************************************************************************************
// ***************************************************************************************
// **																					**
// **								   NUT_Draw.h										**
// **																					**
// ***************************************************************************************
// ***************************************************************************************
#include "lib/N/NType.h"
#include "lib/N/Maths/NVec3f32.h"
#include "lib/N/NRectf32.h"
#include "lib/N/Miscellaneous/NColor.h"
#include "lib/N/NSpline.h"
#include "lib/N/NStructure.h"
#include "lib/N/Utilities/NUT_Slider.h"
#include "../NUT_Gizmo.h"
#include "lib/N/Utilities/NUT_2DAAColorCage.h"
#include "lib/N/Utilities/NUT_XMesh.h"

#ifdef __cplusplus
extern "C"
{
#endif
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ***************************************************************************************************************************************************************
// ***************************************************************************************************************************************************************
// **																																							**
// **														GLOBAL and GENERIC DEFINEs																			**
// **																																							**
// ***************************************************************************************************************************************************************
// ***************************************************************************************************************************************************************

// ***************************************************************************************
// ***************************************************************************************
// **																					**
// **									 												**
// **									Draw											**
// **									---												**
// **						enums, structures and define								**
// **																					**
// ***************************************************************************************
// ***************************************************************************************
// GLOBALS
typedef enum
{
	NUT_DRAW_RENDERING_MODE_3D,
	NUT_DRAW_RENDERING_MODE_ORTHOGRAPHIC,
	//-------------------------	
	NUT_DRAW_RENDERING_MODE_ENUM_SIZE
}NUT_DRAW_RENDERING_MODE_ENUM;
#define NUT_DRAW_DEFAULT_PRIMITIVE_CAPACITY				256

// SLIDER
#define STRING_NUT_SLIDER_PRINT_VALUE					"%.6f"
#define CONSTANT_NUT_DRAW_SLIDER_TEXT_SHIFT				0.125f	// ... relative to the NUT_DRAW_SLIDER text size if there is one. To place the text from the handle tick extremity.
																// 1.0f means 1 text character height, 0.125f means 1/4 character height
// ELLIPSE
#define CONSTANT_NUT_DRAW_ELLIPSE_SLICENB_LOWEST		8
#define CONSTANT_NUT_DRAW_ELLIPSE_SLICENB_LOW			16
#define CONSTANT_NUT_DRAW_ELLIPSE_SLICENB_MEDIUM		32
#define CONSTANT_NUT_DRAW_ELLIPSE_SLICENB_HIGH			64
#define CONSTANT_NUT_DRAW_ELLIPSE_SLICENB_BEST			2048
#define CONSTANT_NUT_DRAW_AACIRCLE_ANGLESTEP			256

#define FLAG_NUT_DRAW_ELLIPSE_MARKINGS_ONLY				BIT_0
#define FLAG_NUT_DRAW_ELLIPSE_MARKINGS					BIT_1
#define FLAG_NUT_DRAW_ELLIPSE_DASHLINE					BIT_2
#define FLAG_NUT_DRAW_ELLIPSE_OPEN						BIT_3
typedef struct
{
	NVEC3	Center;
	NVEC2	Extents; // NVEC2 because its a FLAT POLYGON !
	NCOLOR		Color;
	Nf32		FromAngle;
	Nf32		ToAngle;
	Nu16		SliceNb;		// Number of building Slices ( = number of segments along the perimeter )
	Nu16		MarkingNb;		// Number of Markings.
	Nu8			MarkingOutSize;	// >>> float = MarkingOutSize/255
	Nu8			MarkingInSize;	// >>> float = MarkingInSize/255
	Nu16		Flags;
}NUT_DRAW_ELLIPSE;

// A Spline description
#define CONSTANT_NUT_DRAW_SPLINE_ELLIPSE_HANDLE_SLICE_NB	32 // (=CONSTANT_NUT_DRAW_ELLIPSE_SLICENB_MEDIUM)
#define FLAG_NUT_DRAW_SPLINE_HIDESPLINE						BIT_0
#define FLAG_NUT_DRAW_SPLINE_HIDESPLINEKNOTS				BIT_1
#define FLAG_NUT_DRAW_SPLINE_HIDETANGENTES					BIT_2
#define FLAG_NUT_DRAW_SPLINE_HIDE_XTRA						BIT_3
typedef struct
{
	//NSPLINE					*pSpline;
	NCOLOR					Color;
	Nf32					KnotSize;
	Nf32					Xtra_Threshold;		// For Xtra calculation. Represents the smallest value against that we consider result equivalent to ZERO. 
												// Should be <= NF32_EPSILON_VECTOR_LENGTH For high Precision XTRA infos.
												// Should be <= NF32_SMALL_VECTOR_LENGTH For medium ( and enough)  Precision XTRA infos.	
	Nu32					Flags;
}NUT_DRAW_SPLINE;

// A Triangle Array description (with the vertex)
// Helpful to easy draw a geometry
typedef struct
{
	NARRAY					*pTrianglesArray;
	NCOLOR					Color;
	NVEC3					*pFirstVertexPosition;
	Nu32					VertexStride;
}NUT_DRAW_TRIANGLES_ARRAY;


typedef struct
{
	Nf32				Size;	// Relative to Screen Height. a Size of 1 means a draw text as height as the screen.
	NCOLOR				Color;
}NUT_DRAWTEXT;


// A 2D Arrow(s) ( = a segment with/without arrows on each extremity)
#define FLAG_NUT_DRAW_ARROWS_ABSOLUTE_AARROWSIZE	BIT_0 // by default AArrow Size is relative to segment length
#define FLAG_NUT_DRAW_ARROWS_ABSOLUTE_BARROWSIZE	BIT_1 // by default BArrow Size is relative to segment length
#define FLAG_NUT_DRAW_ARROWS_HIDE_AARROW			BIT_2 // by default AArrow is Visible
#define FLAG_NUT_DRAW_ARROWS_HIDE_BARROW			BIT_3 // by default BArrow is Visible
typedef struct
{
	NCOLOR					Color;
	Nf32					AArrowSize;			 // relative size of A Arrow ( relative to AB size )
	Nf32					BArrowSize;			 // relative size of B Arrow ( relative to AB size )
	Nu32					Flags;				 // constructions Flags to activate several options 
}NUT_DRAW_ARROWS;

// An Oriented Axis
#define DEFAUL_NUT_DRAW_AXIS_ARROW_SIZE				0.1f
#define DEFAULT_NUT_DRAW_AXIS_GRADUATIONEXTEND		0.5f
#define	FLAG_NUT_DRAW_AXIS_USEPARAM_ARROWPARAM		BIT_0 
#define	FLAG_NUT_DRAW_AXIS_USEPARAM_LABELPARAM		BIT_1 
typedef struct
{
	NUT_DRAW_ARROWS		ArrowParam;			// Parameters of the "Axis" itself ( the oriented segment )
	NUT_DRAWTEXT		LabelParam;			// Parameters of the "Labels" ( texts written arround the Axis )
	Nf32				Unit;				// Size of 1 unit
	Nf32				GraduationExtend;	// Half length of graduation relative to 1 unit
	Nu32				Flags;
}NUT_DRAW_AXIS;

// A Physic Structure description (with the vertex)
// Helpful to easy draw It !
typedef struct
{
	NSTRUCTURE						*pStructure;
	NSTRUCTURE_ELEMENT_TYPE_ENUM	ElementType;
	NCOLOR							Color;
	Nf32							JointSize;
}NUT_DRAW_PHYSICSTRUCTURE;

// A Spring description (notes: NUT_SPRING is NOT a representation of an  NSTRUCTURE NSPRING. It's 2 different things !
#define	FLAG_NUT_DRAW_SPRING_USEPARAM_BUILDVECTOR	BIT_0 // by default is not going to be used and the build vector will be estimated 

typedef struct
{
	NVEC3				A;					// first spring extremity	( segment like )
	NVEC3				B;					// second spring extremity	( segment like )
	NVEC3				BuildVector;		// To orient the Spring Draw 'vertical'..
	NCOLOR					Color;

//	NVEC3				Construction_Vector;// with AB, define a plan orthogonal with the Spring plan
	Nf32					Thickness;			// NUT_DRAW_SPRING is a 2D planar shape, [AB] represents the total spring length and Thickness the second dimension of it
	Nu16					SpringCoil;			// Number of SpringCoils ( visually a "coil" = a 'V') 
	Nu16					Flags;				
}NUT_DRAW_SPRING;

// A COLORCAGE description
typedef struct
{
	NUT_2DAACOLORCAGE		*pColorCage;
	NCOLOR					Color;
	NCOLOR					ActiveKnotColor;
	Nu32					ActiveKnotID;	// !!! Be careful: 0 is a valid ID so, force it to NVOID if you don't want to draw any knot with ActiveColor !!!
	Nf32					KnotSize;
}NUT_DRAW_COLORCAGE;

// ***************************************************************************************************************************************************************
// ***************************************************************************************************************************************************************
// **																																							**
// **																			FUNCTIONS																		**
// **																																							**
// ***************************************************************************************************************************************************************
// ***************************************************************************************************************************************************************
NUT_DRAW_RENDERING_MODE_ENUM NUT_GetDrawMode();
void NUT_SetDrawMode(const NUT_DRAW_RENDERING_MODE_ENUM draw_mode);
void NUT_SetDrawConstructionPlane(const NAAPLANE_ENUM axis_aligned_plane );
void NUT_SetDrawConstructionPlaneUnitDirectorVector(const NVEC3 *punit_director_vector );

void NUT_Draw_2DAAColorCage(const NUT_DRAW_COLORCAGE *pdraw);
void NUT_Draw_AABB(const NAABB *paabb, const NCOLOR *pcolor);
void NUT_Draw_Angle(const NVEC3f32 *pO, const NVEC2f32 *pA, const Nf32 angle, const NCOLOR *pcolor);
void NUT_Draw_FastAngle(const NVEC3f32 *pO, const NVEC2f32 *pA, const Nu32 fastangle, const NCOLOR *pcolor);
void NUT_Draw_Arrows(const NVEC3 *pA, const NVEC3 *pB, const NUT_DRAW_ARROWS *parrows);
void NUT_Draw_BoundingSphere(const NBOUNDINGSPHERE *psphere, const NCOLOR *pcolor);
void NUT_Draw_Cross(const NVEC3 *pcenter, const NVEC2 *pextents, const NCOLOR *pcolor);
void NUT_Draw_Ellipse(const NUT_DRAW_ELLIPSE *pellipse);
void NUT_Draw_GizmoMove(const NUT_GIZMO_MOVE *pgm, const NCOLOR *pactivecolor, const NUT_DRAWTEXT *ptxtparam);

void NUT_Draw_Mark(const NVEC3 *pcenter, const NVEC2 *pextents, const NCOLOR *pcolor);
void NUT_Draw_Left(const NVEC3 *pcenter, const NVEC2 *pextents, const NCOLOR *pcolor);
void NUT_Draw_Right(const NVEC3 *pcenter, const NVEC2 *pextents, const NCOLOR *pcolor);
void NUT_Draw_Up(const NVEC3 *pcenter, const NVEC2 *pextents, const NCOLOR *pcolor);
void NUT_Draw_Down(const NVEC3 *pcenter, const NVEC2 *pextents, const NCOLOR *pcolor);
void NUT_Draw_PhysicStructure(const NUT_DRAW_PHYSICSTRUCTURE *pdraw);
void NUT_Draw_Quad(const NVEC3 *pcenter, const NVEC2 *pextents, const NCOLOR *pcolor);
void NUT_Draw_Rectangle(const NRECTf32 *prectangle, const NCOLOR *pcolor);
void NUT_Draw_Segment(const NVEC3 *pA, const NVEC3 *pB, const NCOLOR *pcolor);
void NUT_Draw_Axis(const NVEC3 *pO, const NVEC3 *pB, const NUT_DRAW_AXIS *pparam);
void NUT_Draw_Spline(const NSPLINE *pspline, const NUT_DRAW_SPLINE *pdrawspline);
void NUT_Draw_Spring(const NUT_DRAW_SPRING *pspring);
void NUT_Draw_Slider( const NUT_SLIDER *pslider, const NVEC3 *pposition, const NCOLOR *pcolor, const NUT_DRAWTEXT *ptxtparam );
void NUT_Draw_Text(const Nchar *pstring, const NVEC3 *pposition,const NUT_DRAWTEXT *pparams );
void NUT_Draw_TrianglesArray(const NUT_DRAW_TRIANGLES_ARRAY *ptriarray);
void NUT_Draw_Vector3Array(const NARRAY *pvector3array, const NCOLOR *pcolor);
void NUT_Draw_IsolatedXtri(const NUT_XTRI_ARRAY	*pxtriarray, const NCOLOR *pcolor);
void NUT_Draw_XArea(const NUT_XAREA *pxarea, const NCOLOR *pcolor);
void NUT_Draw_XRPoly(const NUT_XRPOLY *pxrpoly, const NCOLOR *pcolor);
void NUT_Draw_3DMatrix3x3(const NMATRIX3x3	*pm3x3, const NVEC3 *pposition, const Nf32 scale);

void NUT_RenderDrawings();

// Tools for World Axis Aligned Axis Drawings.
// These functions are not using the 'Draw Orthonormal' but simply used the World XYZ Orthonormal.
// And draw their Shapes on the dimensions included in their names 'XY' means draw on the XY plane of the WORLD base.
// This version of the draw function are faster than the global version which works with the customizable Draw Orthonormal.
// for example 'NUT_Draw_XYSlider' and 'NUT_Draw_Slider' do the same JOB but 'NUT_Draw_XYSlider' is faster because it doesn't transform
// coordinates into the Draw Orthonormal 
void NUT_Draw_XYSlider( const NUT_SLIDER *pslider, const NVEC3 *pposition, const NCOLOR *pcolor, const NUT_DRAWTEXT *ptxtparam );

void NUT_Draw_XYSquare(const NVEC3	*pcenter,const Nf32 side,const NCOLOR *pcolor);
void NUT_Draw_XYCircle(const NVEC3	*pcenter,const Nf32 radius, const NCOLOR *pcolor);
void NUT_Draw_XZCircle(const NVEC3	*pcenter,const Nf32 radius, const NCOLOR *pcolor);
void NUT_Draw_ZYCircle(const NVEC3	*pcenter,const Nf32 radius, const NCOLOR *pcolor);
void NUT_Draw_XYTriangleR(const NVEC3 *pcenter,const Nf32 side,const NCOLOR *pcolor);
void NUT_Draw_XYTriangleL(const NVEC3 *pcenter,const Nf32 side,const NCOLOR *pcolor);

// LOW LEVEL & PRIVATE USE (user should not use these functions )
void NUT_Initialize_DrawTextCharTable();


// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef __cplusplus
}
#endif	// __cpluplus
#endif // __NUT_H

